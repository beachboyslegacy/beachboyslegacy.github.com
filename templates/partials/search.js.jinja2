// Unpacks a locator into its data.
function unpackLocator(locator) {
    var parts = locator.split(";");

    return {
        uniqueId: parts[0],
        name: parts[1],
        artist: parts[2],
        releaseYear: parts[3],
    };
}

function fetchResultsForSearch(search, resultsTarget, availableTerms) {
    var terms = search.trim().split(" ")
        .map(word => word.toLowerCase())
        .map(term => term.substring(0, 3))
        .filter(term => availableTerms.includes(term));

    Promise.all(terms.map(term => fetch(`{{base_url}}/_search/${term}.txt`)))
    .then(responses => responses.filter(response => response.status === 200))
    .then(responses => Promise.all(responses.map(response => response.text())))
    .then(responses => responses.join("\n"))
    .then(response => response.split("\n"))
    .then(rawLocators => rawLocators.filter(rawLocator => rawLocator.length))
    .then(rawLocators => rawLocators.map(rawLocator => unpackLocator(rawLocator)))
    .then(locators => (
        locators.filter((locator, index, self) => (
            locator && self.indexOf(locator) === index)
        )
    ))
    .then(locators => {
        // Remove old results.
        [...resultsTarget.options].map(result => result.remove());

        // Add new results.
        for (locator of locators) {
            var resultObject = document.createElement("option");

            var {name, releaseYear, artist, uniqueId} = locator;
            resultObject.value = `${name} (${releaseYear}) - ${artist}`;
            resultObject.dataset.url = `{{base_url}}/item/${uniqueId}.html`;

            resultsTarget.appendChild(resultObject);
        }
    })
    .catch()
}

window.addEventListener("load", () => {
    fetch(`{{base_url}}/_search/available.txt`)
    .then(response => response.text())
    .then(response => response.split("\n"))
    .then(terms => {
        var searchBar = document.getElementById("searchBar");
        var resultsTarget = document.getElementById("results");

        searchBar.addEventListener("input", () => {
            var selectedResults = [
                ...resultsTarget.options
            ].filter(result => result.value === searchBar.value);

            if (selectedResults.length) {
                window.location = selectedResults[0].dataset.url;
            } else if (searchBar.value.length !== 0) {
                fetchResultsForSearch(
                    searchBar.value,
                    resultsTarget,
                    terms,
                );
            }
        });
    })
    .catch()
});
