// Removes any icon.
function removeSearchIcon(iconContainer) {
    [...iconContainer.childNodes].forEach(node => node.remove());
}

// Creates an asset icon.
function createAssetIcon(assetName) {
    const asset = document.createElement("img");
    asset.src = `{{base_url}}/assets/${assetName}`;

    return asset;
}

// Displays "X" button.
function displayXButton(iconContainer, searchBar) {
    removeSearchIcon(iconContainer);

    const xButton = createAssetIcon("delete.svg");
    xButton.addEventListener("click", () => {
        searchBar.value = "";
        displaySearchIcon(iconContainer);
    })

    xButton.style.cursor = "pointer";

    iconContainer.appendChild(xButton);
}

// Display search icon.
function displaySearchIcon(iconContainer) {
    removeSearchIcon(iconContainer);
    iconContainer.appendChild(createAssetIcon("search.svg"));
}

// Display loading icon.
function displayLoadingIcon(iconContainer) {
    removeSearchIcon(iconContainer);
    iconContainer.appendChild(createAssetIcon("preloader-item.svg"));
}

// Unpacks a locator into its data.
function unpackLocator(locator) {
    var parts = locator.split(";");

    return {
        uniqueId: parts[0],
        name: parts[1],
        artist: parts[2],
        releaseYear: parts[3],
    };
}

function fetchResultsForSearch(
    searchBar,
    searchIconContainer,
    resultsTarget,
    availableTerms,
) {
    var terms = searchBar.value.trim().split(" ")
        .map(word => word.toLowerCase())
        .map(term => term.substring(0, 3))
        .filter(term => availableTerms.includes(term));

    Promise.all(
        terms.map(term => fetch(`{{base_url}}/_search/${term}.txt`))
    )
    .then(responses => responses.filter(response => response.status === 200))
    .then(responses => Promise.all(responses.map(response => response.text())))
    .then(responses => responses.join("\n"))
    .then(response => response.split("\n"))
    .then(rawLocators => rawLocators.filter(rawLocator => rawLocator.length))
    .then(rawLocators => (
        rawLocators.filter((locator, index, self) => (
            self.indexOf(locator) === index
        ))
    ))
    .then(rawLocators => rawLocators.map(rawLocator => unpackLocator(rawLocator)))
    .then(locators => {
        // Remove old results.
        [...resultsTarget.options].map(result => result.remove());

        // Add new results.
        for (locator of locators) {
            var resultObject = document.createElement("option");

            var {name, releaseYear, artist, uniqueId} = locator;
            resultObject.value = `${name} (${releaseYear}) - ${artist}`;
            resultObject.dataset.url = `{{base_url}}/item/${uniqueId}.html`;

            resultsTarget.appendChild(resultObject);
        }
    })
    .then(() => (displayXButton(searchIconContainer, searchBar)))
    .catch()
}

window.addEventListener("load", () => {
    let searchIconContainer = document.getElementById("searchIconContainer");
    let searchDeBounce;
    let searchBar = document.getElementById("searchBar");
    let resultsTarget = document.getElementById("results");

    fetch(`{{base_url}}/_search/available.txt`)
    .then(response => response.text())
    .then(response => response.split("\n"))
    .then(terms => {
        searchBar.addEventListener("input", () => {
            if (searchDeBounce) {
                clearTimeout(searchDeBounce);
            }

            // Show loading icon.
            if (searchBar.value.length) {
                displayLoadingIcon(searchIconContainer);
            } else {
                displaySearchIcon(searchIconContainer);
            }

            searchDeBounce = setTimeout(() => {
                var selectedResults = [
                    ...resultsTarget.options
                ].filter(result => result.value === searchBar.value);

                if (selectedResults.length) {
                    window.location = selectedResults[0].dataset.url;
                } else if (searchBar.value.length !== 0) {
                    fetchResultsForSearch(
                        searchBar,
                        searchIconContainer,
                        resultsTarget,
                        terms,
                    );
                }
            }, 500)
        });
    })
    .then(() => {
        // Enable search input
        searchBar.disabled = false;
    })
    .catch()
});
